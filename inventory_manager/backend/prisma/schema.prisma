generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SystemRole {
  USER
  ADMIN
}

enum InventoryRole { 
  OWNER
  WRITER
  READER
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  password      String?
  imageUrl      String?
  role          SystemRole      @default(USER)
  emailVerified DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      OAuthAccount[]
  refreshTokens RefreshToken[]
  members       InventoryMember[]
  inventories   Inventory[]
  createdItems  Item[]
  comments      Comment[]
  likes         Like[]
  salesforceAccountId     String?         
  salesforceContactId     String?       
}

model OAuthAccount {
  id             Int    @id @default(autoincrement())
  provider       String
  providerUserId String
  userId         Int
  user           User   @relation(fields: [userId], references: [id])

  @@unique([provider, providerUserId])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  ipAddress  String?
  userAgent  String?
  expiresAt  DateTime
  revokedAt  DateTime?
  createdAt  DateTime @default(now())
}

model Inventory {
  id        Int               @id @default(autoincrement())
  title     String
  ownerId   Int
  owner     User              @relation(fields: [ownerId], references: [id])
  createdAt DateTime          @default(now())
  description String?
  updatedAt DateTime          @updatedAt
  version   Int               @default(0)
  deleted   Boolean           @default(false)
  deletedAt DateTime?
  members   InventoryMember[]
  fields    Field[]
  items     Item[]
  customIdFormat Json? 
  comments       Comment[]
  isPublic       Boolean           @default(false)
  categoryId     Int?
  category       Category?         @relation(fields: [categoryId], references: [id])
  tags           InventoryTag[]
  @@fulltext([title, description])
}

model InventoryMember {
  id          Int           @id @default(autoincrement())
  inventoryId Int
  userId      Int
  role        InventoryRole
  deleted     Boolean       @default(false)
  deletedAt   DateTime?
  inventory   Inventory     @relation(fields: [inventoryId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@unique([inventoryId, userId])
}

model Field {
  id           Int               @id @default(autoincrement())
  inventoryId  Int
  name         String
  type         String
  deleted      Boolean           @default(false)
  deletedAt    DateTime?
  inventory    Inventory         @relation(fields: [inventoryId], references: [id])
  values       ItemFieldValue[]
}

model Item {
  id            Int               @id @default(autoincrement())
  inventoryId   Int
  createdById   Int
  customId      String?
  version       Int               @default(0)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deleted       Boolean           @default(false)
  deletedAt     DateTime?
  inventory     Inventory         @relation(fields: [inventoryId], references: [id])
  createdBy     User              @relation(fields: [createdById], references: [id])
  fieldValues   ItemFieldValue[]
  likes         Like[]

  @@unique([inventoryId, customId])
}

model ItemFieldValue {
  id           Int         @id @default(autoincrement())
  itemId       Int
  fieldId      Int
  value        String?
  order        Int
  showInTable  Boolean     @default(false)
  deleted      Boolean     @default(false)
  deletedAt    DateTime?
  item         Item        @relation(fields: [itemId], references: [id])
  field        Field       @relation(fields: [fieldId], references: [id])
  @@unique([itemId, fieldId])
}

model Comment {
  id          Int       @id @default(autoincrement())
  inventoryId Int  
  userId      Int
  content     String
  createdAt   DateTime  @default(now())
  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  itemId    Int
  userId    Int
  createdAt DateTime @default(now())
  deleted   Boolean  @default(false)
  deletedAt DateTime?
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([itemId, userId])
}


model InventorySequence {
  inventoryId Int @id
  currentSeq Int
}



model Category {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  inventories Inventory[]
}

model Tag {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  inventories InventoryTag[]
}

model InventoryTag {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  tagId       Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([inventoryId, tagId])
}